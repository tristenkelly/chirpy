// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users
SET email = $2,
hashed_password = $3,
updated_at = $4
WHERE id = $1
`

type ChangePasswordParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getHashedPass = `-- name: GetHashedPass :one
SELECT email, hashed_password, id, created_at, updated_at
FROM users
WHERE email = $1
`

type GetHashedPassRow struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) GetHashedPass(ctx context.Context, email string) (GetHashedPassRow, error) {
	row := q.db.QueryRowContext(ctx, getHashedPass, email)
	var i GetHashedPassRow
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
TRUNCATE refresh_tokens, chirps, users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}
